"""Subclass of TrasformatoreExcelPanel, which is generated by wxFormBuilder."""

import wx
import Automazione
import csv
import os
# Implementing TrasformatoreExcelPanel
import xlsxwriter
from datetime import *
import math
from Controllers.CsvReaderSetter import CsvGenerator
from Controllers.BodyCsv import BodyCsv
from Controllers.AttendeeReportXLSX import WriteAttendeeReportHeader, WriteAttendeeReportBody, WriteReportDiConsegnaBody

class Tutor:
	def __init__(self, nome):
		self.nome = nome

class Docente:
	def __init__(self, nome):
		self.nome = nome

class AutomazioneReportPerLuigiTrasformatoreExcelPanel( Automazione.TrasformatoreExcelPanel ):
	def __init__( self, parent ):
		Automazione.TrasformatoreExcelPanel.__init__( self, parent )
		base_path = os.path.dirname(os.path.realpath(__file__))
		self.csv_tutor_file = base_path+"/tutor.csv"
		self.csv_docente_file = base_path+"/docente.csv"
		self.fieldnames = ["nome"]
		self.tutor_list = self.GenerateList(self.csv_tutor_file, Tutor, self.fieldnames)
		self.docente_list = self.GenerateList(self.csv_docente_file, Docente, self.fieldnames)
		self.Populate(self.tutor_list, self.docente_list)
		self.TabellaTutor.AutoSize()
		self.TabellaDocente.AutoSize()

	def Populate(self, tutor_list, docente_list):
		self.NomeTutor.Clear()
		self.NomeDocente.Clear()
		self.TabellaTutor.ClearGrid()
		self.TabellaTutor.DeleteRows(0, self.TabellaTutor.GetNumberRows())
		self.TabellaDocente.ClearGrid()
		self.TabellaDocente.DeleteRows(0, self.TabellaDocente.GetNumberRows())
		row = 0
		for x in tutor_list:
			self.TabellaTutor.AppendRows(1)
			self.TabellaTutor.SetCellValue(row, 0, x.nome)
			self.NomeTutor.Append(x.nome)
			row += 1
		row = 0
		for x in docente_list:
			self.TabellaDocente.AppendRows(1)
			self.TabellaDocente.SetCellValue(row, 0, x.nome)
			self.NomeDocente.Append(x.nome)
			row += 1
		self.TabellaTutor.AutoSizeRows()
		self.TabellaDocente.AutoSizeRows()

	def GenerateList(self, file, Obj, fieldnames):
		generic_list = []
		if os.path.exists(file):
			with open(file, "r") as csv_file:
				csv_reader = csv.reader(csv_file, delimiter=',')
				line_count = 0
				for row in csv_reader:
					if line_count == 0:
						print(f'Column names are {", ".join(row)}')
						line_count += 1
					else:
						print(row)
						try:
							generic_list.append(Obj(row[0]))
							line_count += 1
						except:
							pass
				print(f'Processed {line_count} lines.')
		else:
			with open(file, "w", newline="") as csv_file:
				writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
				writer.writeheader()
				writer.writerow({"nome": "VUOTO"})
				generic_list.append(Obj("VUOTO"))
		return generic_list
	# Handlers for TrasformatoreExcelPanel events.
	def OnTutorRightClick( self, event ):
		# TODO: Implement OnTutorRightClick
		row = self.TabellaTutor.GetSelectedRows()
		self.NomeTutor.Value = self.TabellaTutor.GetCellValue(row[0], 0)
		self.AggiungiTutor.Value = self.TabellaTutor.GetCellValue(row[0], 0)

	def OnDocenteRightClick( self, event ):
		# TODO: Implement OnDocenteRightClick
		row = self.TabellaDocente.GetSelectedRows()
		self.NomeDocente.Value = self.TabellaDocente.GetCellValue(row[0], 0)
		self.AggiungiDocente.Value = self.TabellaDocente.GetCellValue(row[0], 0)

	def AggiungiTutorEvent( self, event ):
		# TODO: Implement AggiungiTutorEvent
		if self.csv_tutor_file:
			with open(self.csv_tutor_file, "a", newline="") as csv_file:
				writer = csv.writer(csv_file)
				writer.writerow([self.AggiungiTutor.Value])
		self.tutor_list = self.GenerateList(self.csv_tutor_file, Tutor, self.fieldnames)
		self.Populate(self.tutor_list, self.docente_list)
	def RimuoviTutorEvent( self, event ):
		# TODO: Implement RimuoviTutorEvent
		pass

	def AggiungiDocenteEvent( self, event ):
		if self.csv_docente_file:
			with open(self.csv_docente_file, "a", newline="") as csv_file:
				writer = csv.writer(csv_file)
				writer.writerow([self.AggiungiDocente.Value])

		self.docente_list = self.GenerateList(self.csv_docente_file, Tutor, self.fieldnames)
		self.Populate(self.tutor_list, self.docente_list)

	def RimuoviDocenteEvent( self, event ):
		# TODO: Implement RimuoviDocenteEvent
		pass

	def StampaExcelEvent(self, event):
		path = self.CsvFilePicker.GetPath()
		temp = CsvGenerator(path)
		Header = temp.HeaderCsv
		BodyCsvList = temp.BodyCsvList

		#(int(str(x.OraEntrata[:3]).replace(":", ""))
		BodyCsvList = [x for x in BodyCsvList if x.OraEntrata != ""]
		SortedBodyList = sorted(BodyCsvList, key=lambda x: (x.Email, x.OraEntrata))
		SortedBodyList = BodyCsv.DividiPerEmail(SortedBodyList)
		for x in SortedBodyList:
			print(x[0].PrimoIngresso)
			print(x[0].UltimoIngresso)
			BodyCsv.SetPrimoUltimoIngresso(x)
			print(x[0].PrimoIngresso)
			print(x[0].UltimoIngresso)
		if self.DirPicker.GetPath():
			path = self.DirPicker.GetPath()
			file_name = f'{path}/{Header.ID}.xlsx'
		else:
			file_name = f'{Header.ID}.xlsx'
		workbook = WriteAttendeeReportHeader(Header, file_name, self.OrarioEntrata.Value, self.OrarioUscita.Value,
								   self.NomeTutor.Value, self.NomeDocente.Value, "AttandeeReport")


		WriteAttendeeReportBody(workbook, SortedBodyList, self.OrarioEntrata.Value, self.OrarioUscita.Value)

		workbook = WriteAttendeeReportHeader(Header, file_name, self.OrarioEntrata.Value, self.OrarioUscita.Value,
											 self.NomeTutor.Value, self.NomeDocente.Value, "ReportDiConsegna", workbook)

		without_duplicates = []
		for x in SortedBodyList:
			tmp = BodyCsv([])
			tmp.Nome = x[0].Nome
			tmp.Email = x[0].Email
			tmp.JoinDate = x[0].JoinDate
			tmp.OraEntrata = x[0].PrimoIngresso
			tmp.LeaveDate = x[0].LeaveDate
			tmp.OrarioUscita = x[0].UltimoIngresso
			tmp.TempoOnline = x[0].TempoOnline
			tmp.IngressoNormalizzato = x[0].PrimoIngresso
			tmp.UscitaNormalizzato = x[0].UltimoIngresso
			without_duplicates.append(tmp)
			print(tmp.UscitaNormalizzato)
		#for x in without_duplicates:
		#	print(x)

		workbook = WriteReportDiConsegnaBody(workbook, without_duplicates, self.OrarioEntrata.Value, self.OrarioUscita.Value)
		workbook.close()

	def GuessDateFormat(self, Data):
		date_format = [
			'%d/%m/%Y %I:%M:%S %p',
			'%d/%m/%Y %H:%M:%S',
			'%m/%d/%Y %I:%M:%S %p',
			'%m/%d/%Y %H:%M:%S',
			'%Y/%m/%d %I:%M:%S %p',
			'%Y/%m/%d %H:%M:%S',
			'%Y/%d/%m %I:%M:%S %p',
			'%Y/%d/%m %H:%M:%S',
			'%H:%M:%S',
			"%H:%M",
		]
		for data in date_format:
			try:
				data_finale = datetime.strptime(Data, data)
				return data_finale
			except Exception as e:
				print(e)

	def SetOraNormalizzato(self, Orario):
		data_finale = self.GuessDateFormat(Orario)
		data_finale = data_finale.strftime("%H:%M")
		data_finale = datetime.strptime(data_finale, "%H:%M").time()
		return data_finale

	def ConvertTime(self, time):
		raw_hour = time//60
		minutes = time % 60
		if minutes >= 10:
			tempo_finale = "{}:{}".format(raw_hour, minutes)
		else:
			tempo_finale = "{}:0{}".format(raw_hour, minutes)
		return tempo_finale








